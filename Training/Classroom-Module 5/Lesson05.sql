REM -- GROUP FUNCTIONS
SELECT AVG(SALARY), MAX(SALARY), MIN(SALARY), SUM(SALARY)
FROM EMPLOYEES;

SELECT AVG(SALARY), MAX(SALARY), MIN(SALARY), SUM(SALARY)
FROM EMPLOYEES
WHERE JOB_ID LIKE '%REP%';

REM -- GROUP FUNCTIONS ON DATE
SELECT MIN(HIRE_DATE), MAX(HIRE_DATE)
FROM EMPLOYEES;

SELECT COUNT(*)
FROM EMPLOYEES;

SELECT COUNT(*)
FROM EMPLOYEES
WHERE DEPARTMENT_ID=20;

SELECT COMMISSION_PCT, DEPARTMENT_ID
FROM EMPLOYEES;

SELECT COUNT(COMMISSION_PCT)
FROM EMPLOYEES
WHERE DEPARTMENT_ID=90;
REM -- ABOVE RESULTS 0 BECAUSE IT DOES NOT INCLUDES NULL VALUES

REM -- DISTINCT COUNT
SELECT COUNT(DISTINCT DEPARTMENT_ID)
FROM EMPLOYEES;

REM -- GROUP FUNCTIONS IGNORE NULL VALUES SO THERE WILL BE ARIATIONS IN THE GROUP FUNCTIONS OUTPUT
SELECT AVG(COMMISSION_PCT)
FROM EMPLOYEES;
REM -- SOLUTION IS MAKE USE OF NVL FUNCTIONS
SELECT AVG(NVL(COMMISSION_PCT,0))
FROM EMPLOYEES;

SELECT DEPARTMENT_ID 
FROM EMPLOYEES;

REM -- GROUP BY CLAUSE
SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

SELECT DEPARTMENT_ID, SALARY
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
REM -- ABOVE WILL GIVE ERROR BECAUSE AVG SALARY IS AN GROUP FUNCTION

REM -- GROUP BY COLUMN NEED NOT TO BE PART OF SELECT STATEMENT
SELECT  AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

REM -- GROUP BY MULTIPLE COLUMNS
SELECT DEPARTMENT_ID, JOB_ID, SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY DEPARTMENT_ID;

REM -- HAVING CLAUSE
SELECT DEPARTMENT_ID, MAX(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY)>10000;
REM-- WE CANNOT USE ALIAS FRO GROUP FUNCTIONS LIKE FOR MAX() AS "MAXIMUM"

REM -- NESTING IN FROUP FUNCTION
SELECT MAX(AVG(SALARY))
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
