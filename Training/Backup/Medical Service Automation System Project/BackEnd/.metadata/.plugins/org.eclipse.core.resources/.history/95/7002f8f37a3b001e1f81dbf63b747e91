package backend.medicalservice.Messages.controllers;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeoutException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import backend.medicalservice.Messages.entities.MessageEO;
import backend.medicalservice.Messages.services.MessageService;
import backend.medicalservice.Messages.services.impl.MessageConsumerServiceImpl;
import backend.medicalservice.Messages.services.impl.MessageProducerServiceImpl;

@RestController
@RequestMapping("/messages")
public class MessageController {
	
	@Autowired MessageProducerServiceImpl messageSenderRef;
	@Autowired MessageConsumerServiceImpl messageConsumerRef;
	@Autowired MessageService messageServiceRef;
	
//	@PostMapping("/send-message")
//	public String sendMessage(@RequestBody String message){
//		messageSenderRef.sendMessageWithTTL(message, 3000);
//		System.out.println("Sent");
//		return "Message Sent";
//	}
	
	@PostMapping("/send-message")
    public void sendMessage(
    		@RequestParam("senderEmail") String senderEmail,
    		@RequestParam("receiverEmail") String receiverEmail,
    		@RequestParam("messageContent") String messageContent
    ) {
        // Store message in the database
        messageServiceRef.receiveAndStoreMessage(senderEmail, receiverEmail, messageContent);

        // Publish message to RabbitMQ
        String message = senderEmail + ";" + receiverEmail + ";" + messageContent;
        messageSenderRef.publishMessage(message);
    }
	
	@GetMapping("/getMessages")
    public ResponseEntity<List<String>> getMessages() {
        List<String> messages = messageConsumerRef.getStoredMessages(); // Implement this method
        return ResponseEntity.ok(messages);
    }
	
	@PostMapping("/sendNewMessage")
	public void receiveAndStoreMessage(@RequestParam String senderEmail, @RequestParam String receiverEmail, @RequestParam String messageContent){
		messageServiceRef.receiveAndStoreMessage(senderEmail, receiverEmail, messageContent);
	}
	
	@GetMapping("/get-messages")
	public List<MessageEO> getMessagesBySenderAndReceiver(
            @RequestParam String senderEmail,
            @RequestParam String receiverEmail
    ) {
        return messageServiceRef.getMessagesBySenderAndReceiverEmails(senderEmail, receiverEmail);
    }
	
	@GetMapping("/get-sender-messages")
    public ResponseEntity<List<MessageEO>> getSenderMessages(@RequestParam String senderEmail) {
        List<MessageEO> senderMessages = messageServiceRef.getMessagesBySenderEmail(senderEmail);
        return ResponseEntity.ok(senderMessages);
    }

    @GetMapping("/get-receiver-messages")
    public ResponseEntity<List<MessageEO>> getReceiverMessages(@RequestParam String receiverEmail) {
        List<MessageEO> receiverMessages = messageServiceRef.getMessagesByReceiverEmail(receiverEmail);
        return ResponseEntity.ok(receiverMessages);
    }
    
    @PostMapping("/sendMessage")
    public ResponseEntity<String> sendMessage(@RequestBody MessageEO messageEO) {
        if (messageEO == null || messageEO.getMessages() == null || messageEO.getMessages().isEmpty()) {
            return ResponseEntity.badRequest().body("Message content is null or empty.");
        }
        
        String Queue= messageEO.getSenderEmail()+messageEO.getReceiverEmail();

        String messageContent = String.join("\n", messageEO.getMessages());
        try {
            boolean sent = messageServiceRef.sendMessage(messageContent, Queue);
            if (sent) {
                return ResponseEntity.ok("Message sent successfully.");
            } else {
                return ResponseEntity.status(500).body("Failed to send message.");
            }
        } catch (IOException | TimeoutException e) {
            return ResponseEntity.status(500).body("Failed to send message due to an error.");
        }
    }
    
    @PostMapping("/receiveMessage")
    public ResponseEntity<String> receiveMessage(@RequestBody MessageEO messageEO) {
    	String Queue= messageEO.getSenderEmail()+messageEO.getReceiverEmail();
        try {
            String receivedMessages = messageServiceRef.recieveMessage(Queue);
            if (!receivedMessages.isEmpty()) {
            	System.out.println("In recive "+ receivedMessages);
                return ResponseEntity.ok(receivedMessages);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (IOException | TimeoutException e) {
            return ResponseEntity.status(500).body("Failed to receive messages due to an error.");
        }
    }

	
}
