Section - 1

Question 1
Ans:B

Question 2
Ans:A

Question 3
Ans:A

Question 4
Ans:D

Question 5
Ans:A

Question 6
Ans:A

Question 7
Ans:C

Question 8
Ans:B

Question 9
Ans:C

Question 10
Ans:D

Question 11
Ans:D

Question 12
Ans:C

Question 13
Ans:A

Question 14
Ans:B

Question 15
Ans:A

Question 16
Ans:A

Question 17
Ans:D

Question 18
Ans:A

Question 19
Ans:D

Question 20
Ans:C

Section - 2

Question 1
Ans: 1 3 4 2

Question 2
Ans:

Question 3
Ans: head-1-6-2-3-4-5-0-tail

Question 4
Ans: 10 30 40 15

Question 5
Ans: 2


Section - 3

Question 1

Data Structures :
	Data structure is a way of organizing and storing data in a computer program so that it can be accessed and used efficiently.
- Data structures provide a means of managing large amounts of data, enabling efficient searching, sorting, insertion, and deletion of data.
- Data Structures are useful in many ways like
	1. Efficient data processing
	2. Code reusability
	3. Optimization
	4. Scalability
	
Overview Of Data structures:-

Data Structures are divided into 2 Categories.

1. Primitive Data structures.
	These are the most basic data structures and are usually built into programming languages. Examples include:
	Integer
	Float
	Character
	Boolean
	Double	
	Void
	
2. Non-Primitive Data-structures.

	These are complex data structures that are built using primitive data types. Non-primitive data structures can be further categorized into the following types:

	Arrays: A collection of elements of the same data type, stored in contiguous memory locations.

	Linked lists: A collection of elements that are connected by links or pointers.

	Stacks: A collection of elements that follow the Last-In-First-Out (LIFO) principle.

	Queues: A collection of elements that follow the First-In-First-Out (FIFO) principle.

	Trees: A hierarchical data structure consisting of nodes connected by edges.

	Graphs: A non-linear data structure consisting of nodes and edges.

	Hash tables: A data structure that stores data in an associative manner using a hash function.

	Heaps: A specialized tree-based data structure that satisfies the heap property.

	Tries: A tree-like data structure used to store associative arrays where the keys are strings.

	Sets: A collection of unique elements.

	Maps: An abstract data type that stores key-value pairs.


Question 2

Searching Algorithms :
	Searching Algorithms are designed to check for an element or retrive an element from any data strcture where it is stored.
	Based on the type of search operation, these algorithms are generally classified into two categories :
	1. Sequentila Search. [Linear Search]
	2. Interval Search .[ Binary Search]
	
	Linear Search :-
	Linear Search is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element isfound , otherwise the search continues till the end of  tha data set.
	Example :-
	Class LinearSearch{
		public static int liner(int Arr[], int x)
		{
		int N= Arr.length;
		for(int i=0; i<n:i++)
		{
			if(Arr[i]==x)
			return i;
		}
		return -1;
		}
	}

	Binary Search [interval search] :-
		Binary search is defied as a searching alogithm used in a sorted array by repeatedly diving the search interval in half. the idea of binary search is to use the information that the array is sorted and reduce the time complexity.
	
	Example :-
Class Binary{
int BinarySearch(int arr[], int x)
{
int l=0, r=arr.length-1;
while( l<=r)
{
int m=l+(r-1)/2;
if(arr[m]==x)
return m;
if(arr[m]<x)
l=m+1;
else
r=m-1;
}
return -1
}
}

Sorting :-

	A Soting Alogirthm is used to reArranmge a given array or list of elements accaording to a comparison on trhe elements>
	Sorting is a process of ordering or placing a list of elements form a collection in some kind of order. It is nothing but the storage of data insorted order.

	Sorting algorithms are divied majorly into 2 parts.
	1. Comaprion-based. [ Bubble sort, IUnsertion sort, Slectio sort, quick sort, merge sort, heap sort].
	2. Non- Comaprsion based.[ counting sort, Radix sort].

	Selection Sort :-
		Selection sort is a sample and effiecient sorting algorithm that works by repatedly selecting the smallest element from the unsorted portion of the List and moving it to the sorted portion of the lsit.
	Example :-
	public class SelectionSort {
		void sort(int arr[])
		{
			int n=arr.length;
			
			for(int i=0; i<n-1; i++)
			{
				for( int j=i+1; j<n; j++)
				{
					if(arr[j]<arr[min_index])
					{
						min_index=j;
						int temp= arr[min_index];
						arr[min_index=arr[i];
						arr[i]=temp;
					}
				}

			}
		}
	}

Bubble Sort :-

	Bubble sort  is the simplest sorting alogirthm thta works by repeatedly sapping the adjacent elements if thet are in the wrong odrer.
	Example :-
	public class Bubble{
	void bubbleSort(int arr[])
	{
	int n=arr.length;
	for(int i=0; i<n-1;i++)
	{
	for(int j=0; j<n-i-1; j++)
	{
		if(arr[j]> arr[j+1])
		{
			int temp =arr[j];
			arr[j]=arr[j+1];
			arr[j+1]=temp;
		}
	}
	}
	}
	}

Question 3
Creational Design Patterns:
	These are the design patterns which mainly deals with the instantiation of a class / object.
	Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.

There are different types of Creational Design Patterns:
1. Factory Method
2. Abstract Factory
3. Builder
4. Prototype:
5. Singleton

1. Factory Method
	Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.
	
	Here we will an abstract class workstation having methods  to get details of ram, ssd, cpu.
public abstract class WorkStation {
    
    public abstract String getRAM();
    public abstract String getSSD();
    public abstract String getCPU();
    
    @Override
    public String toString() {
       return "Details [ RAM : " + this.getRAM() + ", SSD : " + this.getSSD() + 
               ", CPU : " + this.getCPU() + " ]";
    }
    
}
we have Classes Laptop and Server which extends workstation and overide methods 

We create laptop and server object using workstation


2. Abstract Factory Method:

Here we will an abstract class workstation having methods  to get details of ram, ssd, cpu.
public abstract class WorkStation {
    
    public abstract String getRAM();
    public abstract String getSSD();
    public abstract String getCPU();
    
    @Override
    public String toString() {
       return "Details [ RAM : " + this.getRAM() + ", SSD : " + this.getSSD() + 
               ", CPU : " + this.getCPU() + " ]";
    }
    
}

we also have an interface ComputerAbstractFactory to createWorkStation
public interface ComputerAbstractFactory {
    
    public WorkStation createWorkStation();
    
}

we have Classes Laptop and Server which extends workstation and overide methods 

We create laptop and server object using workstation

In the abstract factory method we hide the details in work factory and ComputerAbstractFactory



Question 4
	Structural design patterns :
   
      Structural design patterns are concerned with how classes and objects 
	  can be composed, to form larger structures.
	  The structural design patterns simplifies the structure by identifying the
	  relationships.
	  
Types of Structural design patterns:
   
   we have 7 types of structural design patterns
   
   1. Adapter pattern
   2. Bridge pattern
   3. Composite pattern
   4. Decorator pattern
   5. Facade Pattern
   6. Flyweight pattern
   7. Proxy pattern
   
 Bridge pattern:
	Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other.
	
	Here we create an abstarct class shape
	public abstract class Shape {
    
    // Composition 
    protected Color color;
    
    public Shape(Color c) {
        this.color = c;
    }
    
    public abstract void applyColor();
    
}
 we have an interface Color
public interface Color {
    
    public void applyColor();
    
}

we craete different classes like Circle triangle using shape and add color to those.	

	Composite pattern:
	
			Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.
	
Here we create interface shape	
	public interface Shape {
    
    public void draw(String fillColor);
    
}

Here we are create a class Drawing that implements Shape to add remove shapes

public class Drawing implements Shape{
    
    private List<Shape> shapes = new ArrayList<>();

    @Override
    public void draw(String fillColor) {
        for(Shape s: shapes) {
            s.draw(fillColor);
        }
    }
    
    public void add(Shape s) {
        shapes.add(s);
    }
    
    public void remove(Shape s) {
        shapes.remove(s);
    }
    
    public void clear() {
        System.out.println("Clearing All the Shapes of Drawing ");
        shapes.clear();
    }
}

now we create individual shapes like circle and triangle by implementing shape
public class Circle implements Shape {

    @Override
    public void draw(String fillColor) {
        System.out.println("Drawing a Circle with " + fillColor);
    }
    
}

public class Triangle implements Shape {

    @Override
    public void draw(String fillColor) {
        System.out.println("Drawing a Triangle with " + fillColor);
    }
    
}



Question 5

Behavioral Design Patterns:
	Behavioral design patterns provide a solution for better interaction between objects and gow to provide loose- coupling and flexibility to extend easily.
	
	In these design patterns, the interaction between the objects should be in such a way that they can easily talk to each other and still should be loosely coupled.
That means the implementation and the client should be loosely coupled in order to avoid hard coding and dependencies.	

There are different types of Behavioral Design Patterns
	1.Chain of Resposibility
	2. Mediator 
	3. Iterator
	4. Command
	5. Momento
	6. Observer
	7. State
	8. Strategy
	9. Template Method
	10. Visitor

1. Chain of Resposibility
	Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.
	
For example if we consider currency dispenser

We will have a class Currency having getAmount method in it.
public class Currency {
    
    private int amount;
    
    public Currency(int amt) {
        this.amount = amt;
    }

    public int getAmount() {
        return amount;
    }
   
}

public interface DispenseChain {
    
    public void setNextChain(DispenseChain nextChain);
    
    public void dispense(Currency cur);
    
} 

we sill have methods rupeedispenser class like 100RupeeDispenser, 200RupeeDispenser, 500RupeeDispenser

in these methods we implents DispenseChain interface and override methods insdie and verify whether amount is greater than 100 and divadable by 100 or not and then we dispense money. In the same way we check for 200 and 500 rupee notes.

Advantages:
- You can control the order of request handling.
- You can introduce new handlers into the app without breaking the existing client code.

Disadvantages:
- Some requests may end up unhandled.



2.Mediator:
	Mediator is a behavioral design pattern that lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.

For example if we consider chatMediator app
we will be having an interface ChatMediator having a sendMessage method in it.

public interface ChatMediator {
    
    public void sendMessage(String msg, User user);
    
    void addUser(User user);
    
}

Here we implements ChatMediator interface and override methods in it then we add users to a list and we verify that the user who is sending should not recive an message.
public class ChatMediatorImpl implements ChatMediator {

    private List<User> users;

    public ChatMediatorImpl() {
        this.users = new ArrayList<>();
    }
    
    @Override
    public void addUser(User user) {
       this.users.add(user);
    }
    
    @Override
    public void sendMessage(String msg, User user) {
        for(User u: this.users) {
            // Message should not be received by the User Sending it
            if(u != user) {
                u.receive(msg);
            }
        }
    }
}

Advantages:
- We can extract the communications between various components into a single place, making it easier.
- we can introduce new mediators without having to change the actual components.
- We can reduce coupling between various components of a program.
- You can reuse individual components more easily.

	